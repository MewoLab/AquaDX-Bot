diff --git a/lib/core/network/client.js b/lib/core/network/client.js
index 25fbbbb47c7f88e83ae26f629e5ae1a0c141725c..12413d45069d7eb1ccda415cfaa0730a2e8c904b 100644
--- a/lib/core/network/client.js
+++ b/lib/core/network/client.js
@@ -27,9 +27,7 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 /* eslint @typescript-eslint/restrict-template-expressions: [ "error", { "allowNumber": true, "allowBoolean": true } ] */
-const crypto = __importStar(require("crypto"));
 const fs = __importStar(require("fs"));
-const promises_1 = require("fs/promises");
 const https = __importStar(require("https"));
 const path = __importStar(require("path"));
 const node_fetch_1 = __importDefault(require("node-fetch"));
@@ -39,7 +37,7 @@ const multipart_stream_1 = __importDefault(require("./multipart-stream"));
 const error_1 = __importDefault(require("./error"));
 const url_1 = require("url");
 // eslint-disable-next-line @typescript-eslint/no-var-requires
-const debug = require('debug')('telegraf:client');
+const debug = (...args) => console.log('telegraf:client', ...args);
 const { isStream } = multipart_stream_1.default;
 const WEBHOOK_REPLY_METHOD_ALLOWLIST = new Set([
     'answerCallbackQuery',
@@ -110,18 +108,12 @@ async function buildFormDataConfig(payload, agent) {
             payload[field] = JSON.stringify(payload[field]);
         }
     }
-    const boundary = crypto.randomBytes(32).toString('hex');
-    const formData = new multipart_stream_1.default(boundary);
+    const formData = new FormData();
     await Promise.all(Object.keys(payload).map((key) => 
     // @ts-expect-error payload[key] can obviously index payload, but TS doesn't trust us
     attachFormValue(formData, key, payload[key], agent)));
     return {
         method: 'POST',
-        compress: true,
-        headers: {
-            'content-type': `multipart/form-data; boundary=${boundary}`,
-            connection: 'keep-alive',
-        },
         body: formData,
     };
 }
@@ -132,19 +124,13 @@ async function attachFormValue(form, id, value, agent) {
     if (typeof value === 'string' ||
         typeof value === 'boolean' ||
         typeof value === 'number') {
-        form.addPart({
-            headers: { 'content-disposition': `form-data; name="${id}"` },
-            body: `${value}`,
-        });
+        form.append(id, value.toString());
         return;
     }
     if (id === 'thumb' || id === 'thumbnail') {
-        const attachmentId = crypto.randomBytes(16).toString('hex');
+        const attachmentId = crypto.randomUUID();
         await attachFormMedia(form, value, attachmentId, agent);
-        return form.addPart({
-            headers: { 'content-disposition': `form-data; name="${id}"` },
-            body: `attach://${attachmentId}`,
-        });
+        return form.append(id, `attach://${attachmentId}`);
     }
     if (Array.isArray(value)) {
         const items = await Promise.all(value.map(async (item) => {
@@ -152,11 +138,11 @@ async function attachFormValue(form, id, value, agent) {
             if (typeof item.media !== 'object') {
                 return await Promise.resolve(item);
             }
-            const attachmentId = crypto.randomBytes(16).toString('hex');
+            const attachmentId = crypto.randomUUID();
             await attachFormMedia(form, item.media, attachmentId, agent);
             const thumb = (_a = item.thumb) !== null && _a !== void 0 ? _a : item.thumbnail;
             if (typeof thumb === 'object') {
-                const thumbAttachmentId = crypto.randomBytes(16).toString('hex');
+                const thumbAttachmentId = crypto.randomUUID();
                 await attachFormMedia(form, thumb, thumbAttachmentId, agent);
                 return {
                     ...item,
@@ -166,10 +152,7 @@ async function attachFormValue(form, id, value, agent) {
             }
             return { ...item, media: `attach://${attachmentId}` };
         }));
-        return form.addPart({
-            headers: { 'content-disposition': `form-data; name="${id}"` },
-            body: JSON.stringify(items),
-        });
+        return form.append(id, JSON.stringify(items));
     }
     if (value &&
         typeof value === 'object' &&
@@ -177,15 +160,12 @@ async function attachFormValue(form, id, value, agent) {
         (0, check_1.hasProp)(value, 'type') &&
         typeof value.media !== 'undefined' &&
         typeof value.type !== 'undefined') {
-        const attachmentId = crypto.randomBytes(16).toString('hex');
+        const attachmentId = crypto.randomUUID();
         await attachFormMedia(form, value.media, attachmentId, agent);
-        return form.addPart({
-            headers: { 'content-disposition': `form-data; name="${id}"` },
-            body: JSON.stringify({
-                ...value,
-                media: `attach://${attachmentId}`,
-            }),
-        });
+        return form.append(id, JSON.stringify({
+            ...value,
+            media: `attach://${attachmentId}`,
+        }));
     }
     return await attachFormMedia(form, value, id, agent);
 }
@@ -195,34 +175,20 @@ async function attachFormMedia(form, media, id, agent) {
     if ('url' in media && media.url !== undefined) {
         const timeout = 500000; // ms
         const res = await (0, node_fetch_1.default)(media.url, { agent, timeout });
-        return form.addPart({
-            headers: {
-                'content-disposition': `form-data; name="${id}"; filename="${fileName}"`,
-            },
-            body: res.body,
-        });
+        return form.append(id, new Blob([res.body]), fileName);
     }
     if ('source' in media && media.source) {
         let mediaSource = media.source;
         if (typeof media.source === 'string') {
-            const source = await (0, promises_1.realpath)(media.source);
-            if ((await (0, promises_1.stat)(source)).isFile()) {
-                fileName = (_c = media.filename) !== null && _c !== void 0 ? _c : path.basename(media.source);
-                mediaSource = await fs.createReadStream(media.source);
-            }
-            else {
                 throw new TypeError(`Unable to upload '${media.source}', not a file`);
-            }
         }
         if (isStream(mediaSource) || Buffer.isBuffer(mediaSource)) {
-            form.addPart({
-                headers: {
-                    'content-disposition': `form-data; name="${id}"; filename="${fileName}"`,
-                },
-                body: mediaSource,
-            });
+            form.append(id, new Blob([mediaSource]), fileName);
         }
     }
+    else {
+        form.append(id, JSON.stringify(media));
+    }
 }
 async function answerToWebhook(response, payload, options) {
     if (!includesMedia(payload)) {
diff --git a/lib/telegraf.js b/lib/telegraf.js
index 23d021c3d5f98493bd714a2114ec8fa853560e5c..b981d7d7311e927486b3869e4b665b12cc43a562 100644
--- a/lib/telegraf.js
+++ b/lib/telegraf.js
@@ -35,7 +35,6 @@ const compact_1 = require("./core/helpers/compact");
 const context_1 = __importDefault(require("./context"));
 const debug_1 = __importDefault(require("debug"));
 const webhook_1 = __importDefault(require("./core/network/webhook"));
-const polling_1 = require("./core/network/polling");
 const p_timeout_1 = __importDefault(require("p-timeout"));
 const telegram_1 = __importDefault(require("./telegram"));
 const url_1 = require("url");
@@ -147,6 +146,7 @@ class Telegraf extends composer_1.Composer {
         });
     }
     startPolling(allowedUpdates = []) {
+        throw new Error()
         this.polling = new polling_1.Polling(this.telegram, allowedUpdates);
         return this.polling.loop(async (update) => {
             await this.handleUpdate(update);
